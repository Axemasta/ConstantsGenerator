using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
namespace ConstantsGenerator.SourceGenerators;

[Generator]
public class ConstantSourceGenerator : ISourceGenerator
{
    private readonly static Dictionary<string, string> ConstantsKeys = new Dictionary<string, string>()
    {
        { "KeyOne", "From source 1" },
        { "KeyTwo", "Lalalala lalalaala" },
    };

    public void Initialize(GeneratorInitializationContext context)
    {
    }

    public void Execute(GeneratorExecutionContext context)
    {
        // var constantsFile = context.AdditionalFiles.FirstOrDefault(f => f.Path.EndsWith("Constants.json"));
        //
        // if (constantsFile is null)
        // {
        //     Console.WriteLine("Constants file not found");
        //     return;
        // }
        //
        // var fileContents = constantsFile.GetText(context.CancellationToken);
        //
        // if (fileContents is null)
        // {
        //     Console.WriteLine("File contents could not be read");
        //     return;
        // }
        //
        // var constants = JsonSerializer.Deserialize<Dictionary<string, string>>(constantsFile.)

        // Find main entry point
        var mainMethod = context.Compilation.GetEntryPoint(context.CancellationToken);

        if (mainMethod is null)
        {
            return;
        }

        // Build up the source code 
        var constantTemplate = "public const string {0} = \"{1}\";";

        var formattedProperties = new List<string>();

        foreach (var kvp in ConstantsKeys)
        {
            var camelKey = kvp.Key;

            var template = string.Format(constantTemplate, camelKey, kvp.Value);

            formattedProperties.Add(template);
        }

        var source = $@"// <auto-generated/>
namespace {mainMethod.ContainingNamespace.ToDisplayString()};

public static class Constants
{{
";

        var sb = new StringBuilder();

        sb.Append(source);

        var newLine = @"
";

        sb.Append(newLine);

        int i = 0;

        foreach (var property in formattedProperties)
        {
            if (i > 0)
            {
                sb.AppendLine();
            }

            sb.Append(new string('\t', 1));

            sb.Append(property);

            i++;
        }

        sb.AppendLine();
        sb.AppendLine("}");

        var completedSource = sb.ToString();

        context.AddSource("Constants.g.cs", SourceText.From(completedSource, Encoding.UTF8));
    }
}