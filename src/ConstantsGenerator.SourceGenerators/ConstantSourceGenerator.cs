using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System.Collections.Immutable;
using System.Text;
using System.Text.Json;

namespace ConstantsGenerator.SourceGenerators;

[Generator]
public class ConstantSourceGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var constants = context.AdditionalTextsProvider
            .Where(text => text.Path.EndsWith("Constants.json", StringComparison.OrdinalIgnoreCase))
            .Select((text, token) => text.GetText(token)?.ToString())
            .Where(text => text is not null)!
            .Collect<string>();

        context.RegisterSourceOutput(constants, GenerateCode);
    }

    private static void GenerateCode(SourceProductionContext context, ImmutableArray<string> args)
    {
        if (!args.Any())
        {
            return;
        }

        var constantsJson = args.First();

        var constants = JsonSerializer.Deserialize<Dictionary<string, string>>(constantsJson);

        if (constants is null)
        {
            return;
        }

        var source = GenerateSource("GeneratedConstants", constants);

        context.AddSource("Constants.g.cs", SourceText.From(source, Encoding.UTF8));
    }

    private static string GenerateSource(string generatedNamespace, Dictionary<string, string> constantsToGenerate)
    {
        // Build up the source code 
        var constantTemplate = "public const string {0} = \"{1}\";";

        var formattedProperties = new List<string>();

        foreach (var kvp in constantsToGenerate)
        {
            var camelKey = kvp.Key;

            var template = string.Format(constantTemplate, camelKey, kvp.Value);

            formattedProperties.Add(template);
        }

        var source = $@"// <auto-generated/>
namespace {generatedNamespace};

public static class Constants
{{
";

        var sb = new StringBuilder();

        sb.Append(source);

        int i = 0;

        foreach (var property in formattedProperties)
        {
            if (i > 0)
            {
                sb.AppendLine();
                sb.AppendLine();
            }

            sb.Append(new string('\t', 1));

            sb.Append(property);

            i++;
        }

        sb.AppendLine();
        sb.AppendLine("}");

        return sb.ToString();
    }
}
